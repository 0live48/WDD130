/* Activity 1 styles */
.content1 {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 20px; /* space between rows */
  padding: 20px;
}

.row {
  display: flex;
  gap: 20px; /* space between boxes in a row */
}

.red1 { 
  width: 300px; 
  height: 100px; 
  background-color: red; 
} 

.green1 {
  width: 100px; 
  height: 100px; 
  background-color: green; 
} 

.yellow1 {
  width: 100px; 
  height: 100px; 
  background-color: gold; 
} 

.blue1 {
  width: 300px; 
  height: 100px; 
  background-color: blue; 
}

/* Activity 2 styles */ 
/* Activity 2 styles */
.content2 {
    /* This is the parent of the activity 2 boxes. */
    position: relative; /* Establish a positioning context for its absolutely positioned children */
    width: 400px; /* Adjust parent width to contain the diagonal layout */
    height: 400px; /* Adjust parent height */
    border: 5px solid black; /* Add a black border to match the image frame */
    background-color: white; /* Background color of the container */
    overflow: hidden; /* Hide any content that might spill outside the bounds */
}

.red2 {
    width: 100px;
    height: 100px;
    background-color: red;
    position: absolute; /* Position it absolutely within .content2 */
    top: 50px; /* Example: Offset from the top */
    left: 50px; /* Example: Offset from the left */
    z-index: 4; /* Higher z-index to be on top */
}

.green2 {
    width: 100px;
    height: 100px;
    background-color: green;
    position: absolute;
    top: 100px; /* Offset more from the top than red */
    left: 100px; /* Offset more from the left than red */
    z-index: 3; /* Behind red, but above yellow */
}

.yellow2 {
    width: 100px;
    height: 100px;
    background-color: gold; /* Using gold for yellow */
    position: absolute;
    top: 150px; /* Offset more than green */
    left: 150px; /* Offset more than green */
    z-index: 2; /* Behind green, but above blue */
}

.blue2 {
    width: 100px;
    height: 100px;
    background-color: blue;
    position: absolute;
    top: 200px; /* Offset more than yellow */
    left: 200px; /* Offset more than yellow */
    z-index: 1; /* Lowest z-index, appears at the bottom */
}

/* Adjust the `top` and `left` pixel values for each box
   to get the exact diagonal spacing you see in the image.
   The `z-index` values ensure they stack correctly. */
/* Activity 3 styles */
.content3 {
    display: grid;
    /* Define 2 columns for green and yellow, with a small middle column for the gap */
    grid-template-columns: 1fr auto 1fr; /* green, gap, yellow */
    /* Define 3 rows: red, middle section (green/yellow), blue */
    grid-template-rows: auto auto auto; /* Auto for content-based height, or use px/fr */
    gap: 0; /* No explicit gap between rows if the image indicates no white space there */
    width: 600px; /* Example total width, adjust as needed */
    /* height: ... Leave height auto or set a specific value if required */
    border: 5px solid black; /* Adding a black border to mimic the image frame */
    background-color: black; /* The outer black background */
    padding: 0px; /* No padding on the content3 itself, colors go edge to edge */
}

.red3 {
    background-color: red;
    grid-column: 1 / span 3; /* Spans across all 3 columns (green, gap, yellow) */
    grid-row: 1; /* First row */
    height: 100px; /* Example height for the red band */
}

/* We don't have a specific element for the white gap, but the grid can create it */
/* The default background of content3 (or the parent container's background) might show through */
/* or we can explicitly place a white element if needed. For now, grid-template-columns handles it. */

.green3 {
    background-color: green;
    grid-column: 1; /* First column */
    grid-row: 2; /* Second row */
    height: 200px; /* Example height for the green band */
    /* Make sure width fills the grid cell */
    width: 100%;
}

.yellow3 {
    background-color: gold; /* Using 'gold' as per your existing code for yellow */
    grid-column: 3; /* Third column */
    grid-row: 2; /* Second row */
    height: 200px; /* Example height for the yellow band (same as green) */
    /* Make sure width fills the grid cell */
    width: 100%;
}

.blue3 {
    background-color: blue;
    grid-column: 1 / span 3; /* Spans across all 3 columns */
    grid-row: 3; /* Third row */
    height: 150px; /* Example height for the blue band */
}

/* Adjust these values (especially heights and grid-template-columns auto width)
   to precisely match the proportions in your image.
   The 'auto' column in grid-template-columns will shrink to fit its content,
   but since there's no content, it will just be a narrow separator based on default grid behavior.
   If you want a fixed white gap, you could define it with a specific pixel width:
   grid-template-columns: 1fr 20px 1fr; (e.g., 20px for the gap)
*/
/* Activity 4 styles */
.content4 {
    display: grid;
    /* Define two columns: one for red (e.g., 2 parts) and one for the stripes (e.g., 1 part) */
    grid-template-columns: 2fr 1fr; /* Example: Red takes 2/3 width, stripes take 1/3 width */
    /* Define three rows for the right side stripes */
    grid-template-rows: 1fr 1fr 1fr; /* Three equal height rows for green, yellow, blue */
    gap: 0; /* No gaps between grid items in this flag-like layout */
    width: 600px; /* Example total width, adjust as needed */
    height: 400px; /* Example total height, adjust as needed */
    border: 5px solid black; /* Adding a black border to mimic the image frame */
    background-color: white; /* Default background within the border */
    box-sizing: border-box; /* Ensures padding/border are included in the element's total width/height */
}

.red4 {
    background-color: red;
    grid-column: 1; /* Place in the first column */
    grid-row: 1 / span 3; /* Span across all three rows (to be as tall as the entire right section) */
    width: 100%; /* Fill the assigned grid area */
    height: 100%; /* Fill the assigned grid area */
}

.green4 {
    background-color: green;
    grid-column: 2; /* Place in the second column */
    grid-row: 1; /* First row on the right side */
    width: 100%;
    height: 100%;
}

.yellow4 {
    background-color: gold; /* Using 'gold' for yellow */
    grid-column: 2; /* Place in the second column */
    grid-row: 2; /* Second row on the right side */
    width: 100%;
    height: 100%;
}

.blue4 {
    background-color: blue;
    grid-column: 2; /* Place in the second column */
    grid-row: 3; /* Third row on the right side */
    width: 100%;
    height: 100%;
}
/* Activity 5 styles */
.content5 {
  width: 800px;
  margin: 0 auto;
}

.red5 {
  background-color: red;
  height: 100px;
  width: 100%;
}

.green5 {
  background-color: green;
  width: 200px;
  height: 200px;
  float: left; /* key to wrapping */
  margin: 20px;
}

.yellow5 {
  background-color: gold;
  padding: 20px;
  font-family: sans-serif;
  /* Do NOT add overflow or clear here â€” we want text to wrap! */
}

.blue5 {
  background-color: blue;
  height: 100px;
  width: 100%;
  clear: both; /* ensures it appears after float */
}

/* Activity 6 styles */
.content6 {
  display: grid;
  width: 600px;
  height: 600px;
  margin: auto;
  grid-template-columns: repeat(6, 100px);
  grid-template-rows: repeat(6, 100px);
  border: 2px solid black;
  position: relative;
}

.red6 {
  background-color: red;
  grid-column: 1 / span 3;
  grid-row: 1 / span 2;
  z-index: 2;
}

.green6 {
  background-color: green;
  grid-column: 1 / span 2;
  grid-row: 5 / span 2;
  z-index: 2;
}

.yellow6 {
  background-color: gold;
  grid-column: 5 / span 2;
  grid-row: 5 / span 2; /* changed from row 3 to row 5, and span 2 rows */
  z-index: 2;
}

.blue6 {
  background-color: blue;
  grid-column: 2 / span 4;
  grid-row: 2 / span 4;
  z-index: 1;
}
